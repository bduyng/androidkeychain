/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.mscripts.androidkeychain;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import android.content.SharedPreferences;

@Kroll.module(name = "Androidkeychain", id = "com.mscripts.androidkeychain")
public class AndroidkeychainModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "AndroidkeychainModule";
	private static final boolean DBG = TiConfig.LOGD;

	public AndroidkeychainModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	// Methods
	@Kroll.method
	public String retrieveSharedPreferences(String strKey) {
		SharedPreferences settings = TiApplication.getAppCurrentActivity()
				.getSharedPreferences("MyPreferences", 0);
		try {
			String[] straKey = settings.getString("encryptionKey", "").split(",");
			byte []keyData = new byte[straKey.length];
			for (int i = 0; i < straKey.length; i++) {
				keyData[i] = Byte.valueOf(straKey[i]);
			}
			byte[] input = Base64.decode(settings.getString(strKey, ""));
			SecretKeySpec skeySpec = new SecretKeySpec(keyData,
					"AES");
			Cipher cipher = Cipher.getInstance("AES");
			cipher.init(Cipher.DECRYPT_MODE, skeySpec);
			byte[] decrypted = cipher.doFinal(input);
			return new String(decrypted, "UTF-8");
		} catch (Exception e) {
			return "";
		}
	}

	// Methods
	@Kroll.method
	public void storeSharedPreferences(String strKey, String strValue) {
		SharedPreferences settings = TiApplication.getAppCurrentActivity()
				.getSharedPreferences("MyPreferences", 0);
		try {
			String[] straKey = settings.getString("encryptionKey", "").split(",");
			byte []keyData = new byte[straKey.length];
			for (int i = 0; i < straKey.length; i++) {
				keyData[i] = Byte.valueOf(straKey[i]);
			}
			SecretKeySpec skeySpec = new SecretKeySpec(keyData,
					"AES");
			Cipher cipher = Cipher.getInstance("AES");
			cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
			byte[] encrypted = cipher.doFinal(strValue.getBytes());
			SharedPreferences.Editor editor = settings.edit();
			editor.putString(strKey, Base64.encodeBytes(encrypted));
			editor.commit();
		} catch (Exception e) {

		}
	}

	private byte[] getStaticKey(String str) {
		String staticKeyArr[] = str.split(",");
		byte[] key = new byte[staticKeyArr.length];
		for (int i = 0; i < staticKeyArr.length; i++) {
			key[i] = Byte.valueOf(staticKeyArr[i]);
		}
		return key;

	}

}
